Extructuta 

Directorio de trabajo | preparacion o staing | repositirio local || repositirio remoto

01. git init [iniciar el repositorio]
02. git add biografia.txt [añadir el archivo]
03. git commit -m "version 1" [guardar en la base de datos del repositorio]
04. git add . [añadir todos los cambios hechos a la base de datos del repositorio]
05. git commit -m "Cambios a v1" [guadar los cambios en la db del repositorio]
06. git status [muestra el estado de los archivos de la base de datos]
07. git show [cambios que se han hecho]
08. git log biografia.txt [muestra el historial de cambios de un archivo]
09. git push [enviar hacia otro repositorio remoto lo que yo estoy haciendo]
10. git pull [permite traer de cualquier repositorio remoto combinando dos comandos 28. y 29.]
11. git status [estado del proyecto en este momento]
12. git rm historia.txt [devolver el comando 2. y 13. ]
13. git rm --cached historia.txt [descachearlo lo de debaja en la ram "ya no :)" ligado al comando 12.]
14. git commit -m "primer commit" [realizar un cambio, ya para guardar]
15. git config [todas las configuraciones de git]
16. git config --list [ver la configuracion de git]
17. git config --list  --show-origin [ver donde esta ubicado los archivos de configuracion]
18. git config --global user.name "Andres Leon" [colocarle un nombre para saber quien esta haciendo cambios] 
19. git config --global user.email "dandresleon64@gmail.com" [colocarle un email para saber quien esta haciendo cambios]
20. git log historia.txt [ver el historial de este archivo]
21. git show historia.txt [ver las modificaciones que han existido] 
22. git commit [cuando se va sin mensaje el lo pide y la forma de salir es "comandos 17. " y para empezar a escribir dentro de "vi" 18. ]
23. git diff 3f9221603091ac205cea6fa2f88710da3857a482 e549b6799aa407cfbb7034c22b817577c85c44dc [compara dos commit]
24. git reset effa0d5de0734e75a7aa0186a36d36b218c45865 --hard [la version a la que quiero volver]
25. git log --stat [ver los cambios del historial mas detallado, con la letra "q me pueda salir si lo que se muestra es muy largo"]
26. git checkout e549b6799aa407cfbb7034c22b817577c85c44dc historia.txt [checar un commit anterior y se quiere se hace un reeemplazo con el comando 04. y 05.]
27. git checkout master [checar el ultimo commit] 
28. git fetch [actualizar mi repositirio local con los cambios subidos en el remoto]
29. git merge [combinar lo del repositorio remoto con mi directorio de trabajo || combinar ramas]
30. git commit -a -m "se modifico algo" [aplicar 04. y 05. en un solo comando]
31. git branch cabecera [crear una rama]
32. git checkout cabecera [cambiar entre ramas]
33. git branch [saber que ramas existen]
34. git remote add origin https://github.com/dandres10/hyperblog.git[añadir un repositirio remoto]
35. git remote [verificar que si se añadio el repositorio remoto]
36. git remote -v [que puedo hacer con el repositirio remoto hagale al comando y se da cuenta, es la url del repositorio]
37. git push origin master [enviar a  mi repositirio remoto la rama master, literal enviarle lo que sea]
38. git pull origin master [traerme lo que esta en el repositirio remoto]
39. git pull origin master --allow-unrelated-histories [unir dos historias a las malas "solo pasa al crear el repositorio remoto por primera vez"]
40. git config -l [configuracion local de git] 
41. git remote set-url origin git@github.com:dandres10/hyperblog.git [cambiar la url de repositorio]
42. git pull origin master [traerme los cambios del origin a master(local)]
43. git diff [23. y  mirar que ha cambiado entre el origin y la rama local que en este caso es master]
44. git push origin master [enviar cambios de mi rama master local al repositirio remoto "origin"]
45. git log --all --graph [pinta las ramas de los commits]
46. git log --all --graph --decorate --oneline [45. | mas comprimido la informacion]
47. git tag -a v0.1 -m "resultado del las primeras clases del curso" cbc9f91 [colocar un tag (puede hacer referencia a las versiones estables del proyecto este id de un commit minificado cbc9f91 es una version estable)]
48. git tag [ver mis tags || versiones estables de entre todos mis commit]
49. git show-ref --tags [ver a que referencia hace ese tag "que commit"]
50. git push origin --tags [subir los tags al repositorio]
51. git tag -d dormido [eliminar un tag. en github no se borra toca de una manera especial 52.]
52. git push origin :refs/tags/dormido [asi se borra de github un tag]
53. git show-branch [ramas que existen con una mejor descripcion]
54. git show-branch --all [la misma que la 53. pero con mas informacion]
55. gitk [muestra todo de manera visual "corre el comando es super wooowooww"]
56. git push origin cabecera [subir al origen las ramas]
57. git clone https://github.com/dandres10/hyperblog.git [clonar un repositorio]
58. git add imagenes/dragon.png [añadir una imagen al repositorio]
59. git add .gitignore [añadir un archivo de configuracion el cual su funcion es ignorar ciertos archivos]
60. git revert asd564sqq -> [quietar un commmit de la linea del tiempo]


------------------------comandos en la consola y navegacion----------------------
01. pwd [en donde estoy parado]
02. mkdir [crear una carpeta]
03. cat nombre_del_archivo.txt [ver el contenido de un archivo]
04. cd [navegar entre carpetas]
05. rm [borrar una carpeta o archivo]
06. ls [listar todo en donde este parado en el sistema]
07. ls -al [listar con argumentos]
08. clear [limpiar la consola de git]
09. cd [entrar a una carpeta]
10. cd .. [devolverme o salir de esta carpeta]
11. cd /c [ir a un disco en especifico]
12. history [ultimos comandos que he ingresado]
13. para escoger alguno de la lista que aparece !25 
14. touch vacio.txt [crear un archivo vacio]
15. rm --help [ayuda de como funciona cada comando "rm" puede ser diferente]
16. code historia.txt [iniciar este archivo con vs]
17. esc pausa y ingresar shif + z + z [para guardar y salir de "vi"]
18. espace + i [para poder empezar a escribir en "vi"]
----------------------------consfiguracion de las llaves publicas y privada-------------------
19. ssh-keygen -t rsa -b 4096 -C "dandresleon64@gmail.com" [generar las llaves publica y privada de git "rsa"-> algoritmo para generar las llaves "4096"-> nivel de complegidad del algoritmo ]
20. eval $(ssh-agent -s) [verificar que el porceso de las llaves se este ejecutando]
21. ssh-add ~/.ssh/id_rsa [añadir mi llave privada para que mi pc sepa que existe "~"-> home de mi maquina]
22. cat id_rsa.pub [ver mi llave publica en la direccion en donde se guarda eso "~"]
23. cat known_hosts []
-----------------------------------------------fin consfiguracion de las llaves publicas y privada-----------------------------------
24.  alias arbolito="git log --all --graph --decorate --oneline" [crear alias para esos comandos super largos]
25. vim historia.txt [programa de consolola como un blog de notas para guardar y salir es :qw o buscar en google]


omni proceso 

--Actualizar rama
1. git pull --rebase origin develop
2. git add .
3. git rebase --continue
4. git push --force
--Unir commits 
1. git rebase -i 7bc2e6910e2e3d5c5bd8d5b7a2a42c514b84c645 -> [Buscar el commit incial desde donde unir los commits]

-- cancelar
git rebase --abort
git commit --amend --no-edit

apps\omni-web\src\main.ts
// if (environment.production) {
//   enableProdMode();
//   window.console.log = function () {}; // disable any console.log debugging statements in production mode
// }



apps\omni-web\src\test-setup.ts





