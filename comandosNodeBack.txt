
npm i morgan
npm i cors 
npm i
npm i -D @types/express @types/morgan
tsc --init
npm i -g typescript



------------Comando curso de udemy
1.  npm init  -y -> crear el pakage.json 
2.  npm i nodemon -g -> livereload 
2.1 npm install nodemon --save-dev -> solo para cuando se este en entorno de desarrollo
3.  nodemon index.js -> se ejecuta el archivo inicial del node en livereload
4.  npm install express || npm i express@4.17.1 -> Express es un framework el cual nos ayudara a montar el backend
5.  npm i dotenv -> para el manejo de variables de entorno
6.  process.env -> se imprime en un console log y es como si fuera el appsetting de .net core
7.  npm i express-validator -> validar modelo de datos request
8.  npm i mongose || npm install mongoose -> manejador de la conexion con mongoDB
9.  npm i bcryptjs -> para encriptar las contraseñas (con este metodo es imposible recuperar la contraseña)
10. npm i jsonwebtoken && npm i @types/jsonwebtoken -> libreria para el manejo de la sessión.
11. npm i cors -> colocar una capa de seguridad los cors en una api de node.
12. npm i moment -> manejador de fechas 
13.  npm i @types/bcryptjs -> para encriptar las contraseñas 
14. npm install socket.io && npm install @types/socket.io -> libreria para manejar sockets 
15. http://localhost:8081/socket.io/socket.io.js -> mirar si quedo bien instalado el comando 14 


----------Crear desde cero una aplicacion de node
1.  npm init  -y -> crear el pakage.json 
2.  npm install express -> Express es un framework el cual nos ayudara a montar el backend
3.  npm i dotenv -> para el manejo de variables de entorno
4.  npm i cors -> colocar una capa de seguridad los cors en una api de node.
5.  tsc --init -> inicializa la configuracion de TypeScript
6.  npm i ts-node
7.  npm i nodemon
8.  npm i @types/express @types/node
9.  npm i bcryptjs -> para encriptar las contraseñas 
10. npm i @types/bcryptjs -> para encriptar las contraseñas 
11. npm i express-validator -> asignar validaciones 
12. npm i @types/express-validator -> asignar validaciones
13. npm i inversify && npm i @types/inversify -> inyeccion de dependecias 
14. npm i inversify-express-utils && npm i @types/inversify-express-utils
15. npm i typeorm -> orm
16. npm install reflect-metadata --save -> para el orl [15]
17. npm install @types/node --save-dev -> para el orl [15]
18. npm i yargs && npm i @types/yargs -> comandos personalizados para ingresar por la consola (Ej: cambiar de ambiente).
19. npm i colors && npm i @types/colors -> darle color a los mensajes de consola.
20. npm i -D jest supertest && npm i -D @types/jest supertest && npm i --save-dev @types/supertest -> instalar pruebas unitarias con jest.
21. set NODE_OPTIONS=--experimental-vm-modules && npx jest -> para que jest pueda entender los imports
22. sudo sysctl fs.inotify.max_user_watches=131070 [Linux, para aumentar los archivos compilados para node de forma temporal]
23. echo fs.inotify.max_user_watches= 131070 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p [igual pero ahora es de forma permanente]
--Swagger API documentation, Node js & Express
1. npm i swagger-jsdoc swagger-express



---------atajos mongoDB compass
1. crt + r -> recarga las base de datos.
2. npm install -g heroku -> instalacion de heroku



-------crear variables de entorno en heroku
1. heroku config:set MONGODB_CNN="mongodb://marlon:1233891911@clustersynergy-shard-00-00.k3y8i.mongodb.net:27017,clustersynergy-shard-00-01.k3y8i.mongodb.net:27017,clustersynergy-shard-00-02.k3y8i.mongodb.net:27017/synergyDB?ssl=true&replicaSet=atlas-8rdym2-shard-0&authSource=admin&retryWrites=true&w=majority" -> crear una varible de entorno



--------conexion con posgresql
1. npm i pg && npm i @types/pg


