1. Add-Migration Initial ->  Se crear la migracion ("codigo")
2. Update-database -> se ejecuta la migracion en la base de datos 
3. Script-Migration -> obtener el script de base de datos
3. Script-Migration -Idempotent -> obtener el script de base de datos de los ultimos cambios

----------------------------------configuraciones-----------------------
Microsoft.EntityFrameworkCore.SqlServer -> 1. 
Microsoft.EntityFrameworkCore.Design -> 2. 
Microsoft.EntityFrameworkCore.Tools -> 3.
Swashbuckle.AspNetCore
Microsoft.AspNetCore.Authentication.JwtBearer


AutoMapper.Extensions.Microsoft.DependencyInjection
Azure.Storage.Blobs
Microsoft.AspNetCore.Mvc.NewtonsoftJson
System.Linq.Dynamic.Core
Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite
Microsoft.EntityFrameworkCore.InMemory
-------------------------repo---------
https://github.com/gavilanch/CursoRESTfulAPIsASPNETCore

HttpContext.Request.Headers[HCTYPE].ToString(), HttpContext.Request.Headers[PRESTADOR].ToString()

Scaffold-DbContext 'Data Source=DESKTOP-OPTH6EV\SQLEXPRESS;Initial Catalog=Prueba;Integrated Security=True' Microsoft.EntityFrameworkCore.SqlServer -ContextDir Data -OutputDir Models


Scaffold-DbContext "Data Source=DESKTOP-OPTH6EV\SQLEXPRESS;Initial Catalog=Prueba;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models  -Context "Contexto/Context"

1. Scaffold-DbContext "Data Source=DESKTOP-1EBTD6O\SQLEXPRESS;Initial Catalog=AdventureWorks2019;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models  -Context "Contexto/Context"

Scaffold-DbContext "Data Source=sparking.database.windows.net;Initial Catalog=sparking;Persist Security Info=True;User ID=sparking;Password=9ccf3092-6b76-4f79-9092-a419921a6aa9" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models  -Context "Contexto/Context"

 esta es -> Scaffold-DbContext "Data Source=DESKTOP-1EBTD6O\SQLEXPRESS;Initial Catalog=synergy;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Contexto  -Context "Contexto/Context"
 
 Scaffold-DbContext "Data Source=10.70.1.18,1435;Initial Catalog=SenaDemo;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Contexto  -Context "Contexto/Context"
 

Synergy generator 
Scaffold-DbContext "Data Source=DESKTOP-QEFA977\SQLEXPRESS;Initial Catalog=synergy;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Contexto  -Context "Context"
 


Base.Datos.Contexto.Entidades

https://localhost:44338/swagger/index.html

Mire donde esta parado en que poryecto en la consola de nuget 
Scaffold-DbContext "Data Source=DESKTOP-1EBTD6O\SQLEXPRESS;Initial Catalog=PeliculasAPI;Integrated Security=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Contexto/Entidades  -Context Contexto


-----------------------------------------------------------------------------

//var esValido = TryValidateModel(entidadDTO);

            //if (!esValido)
            //{
            //    string messages = string.Join("/", ModelState.Values
            //                            .SelectMany(x => x.Errors)
            //                            .Select(x => x.ErrorMessage));
            //    var data = messages.Split("/");
            //    return BadRequest(ModelState);
            //}
			
			92e2a6807c69dc62c113518b41f5ba36296a3ad9
			
-------------------------------------------------------------------

cors--------------------------------------
parte uno va ConfigureServices
services.AddCors(options => options.AddPolicy("ApiCorsPolicy", build =>
            {
                build.WithOrigins("http://localhost:4200")
                     .AllowAnyMethod()
                     .AllowAnyHeader();
            }));
parte dos 

va en cConfigure
app.UseCors("ApiCorsPolicy");
fin--------------------------------------

soap-------------------------------------
SoapCore
-----------------------------------------
HttpContext.Request.Headers[HCTYPE].ToString()
----------------------------------------------> consulta recursiva
public List<ParametrizacionExamenFisico> GetListExamPhysical(Guid typeHCId,Guid prestador)
        {
            List<ParametrizacionExamenFisico> result = 
                _parametrizacionExamenFisicoRepository.Entity
                .Where(x => x.Prestador.Equals(prestador) && 
                            x.TipoRegistroMedico.Equals(typeHCId)).Include(i => i.IdsuperiorNavigation)
                                                                  .Include(i => i.InverseIdsuperiorNavigation)
                                                                  .Include(i => i.TipoInputNavigation)
                                                                  .Include(i => i.TipoRegistroMedicoNavigation).ToList();

            result.ForEach(i => {
                i.InverseIdsuperiorNavigation = i.InverseIdsuperiorNavigation.OrderBy(o => o.Orden).ToList();
            });

            List<ParametrizacionExamenFisico> resultSuperior = result.Where(x => x.Idsuperior == null).OrderBy(o => o.Orden).ToList(); 
            
            return resultSuperior;
        }
----------------------------------------------

------------------------------------------------> solo actualizar algunos campos de la base de datos

_procMedicoActividadEstrategia.Context.Attach(entidadqueseentroenlatabla).CurrentValues.SetValues(entidadquesequiereenviarconloscamposrequeridosasetear);
---------------------------------------------------------------------
-----------------------------------------------------> solo actualizar algunos campos 2
  _characterizationSheetHeadRepository.Context
                    .Update(characterizationSheetHead)                    
                    .Property(e => e.ConsecutiveId).IsModified = false;
----------------------------------------------------------------------------------








